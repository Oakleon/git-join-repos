#!/usr/bin/env bash

set -e
IFS=$'\n\t'

self_name="$(basename $0)"
sed="sed"

if [ -z "$1" ]; then
    echo "usage: $self_name filename (where filename is in format \"name url(\n)name url\")"
    exit 99
fi

if [ "$(uname -s)" = "Darwin" ]; then
    if [ -z "$(which ssed)" ]; then
        echo "OS X detected, please ensure you have gnu sed installed. The built-in sed will not work."
        echo "To workaround this run \"brew install ssed\""
        echo "Obviously, homebrew is required for that to work"
        exit 99;
    fi
    sed="ssed"
fi

data_file="$1"
name_urls="$(cat $data_file)"
repo_name=
repo_url=

function empty_repo_or_die {
    total="$(git count-objects -v | cut -d' ' -f2 | awk '{s+=$1}END{print s}')"

    if [ "$total" -ne "0" ]; then
        echo "This must be run in an empty git repository!"
        exit 98
    fi
}

function split_line {
    repo_name="${a% *}"
    repo_url="${a#* }"
}

function repo_master_to_subdir {
    git filter-branch -f --index-filter \
        "git ls-files -s | ${sed} \"s|\t\\\"*|&${repo_name}/|\" |
        GIT_INDEX_FILE=\$GIT_INDEX_FILE.new git update-index --index-info &&
        mv \"\$GIT_INDEX_FILE.new\" \"\$GIT_INDEX_FILE\"" HEAD

    git filter-branch -f --msg-filter "/bin/echo -n \"${repo_name}: \" && cat"

}

empty_repo_or_die

for a in $name_urls; do
    split_line "$a"

    git checkout --orphan "$repo_name"
    git rm -qrf --ignore-unmatch .
    git remote add "$repo_name" "$repo_url"
    git fetch "$repo_name"
    git merge "$repo_name/master"
    repo_master_to_subdir
    git remote remove "$repo_name"
done

git checkout --orphan master
git rm -qrf --ignore-unmatch .

for a in $name_urls; do
    split_line "$a"

    git merge --allow-unrelated-histories --ff -m "$repo_name: $self_name monolithic conversion merge" "$repo_name"
    git branch -D "$repo_name"
done
